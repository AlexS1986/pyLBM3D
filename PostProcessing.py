import numpy as np

def display(points):
    import matplotlib.pyplot as plt
    from mpl_toolkits.mplot3d import Axes3D
    fig = plt.figure(figsize=(4, 4))

    ax = fig.add_subplot(111, projection='3d')
    for point in points:
        ax.scatter(point[0], point[1], point[2], c='r')  # plot the point (2,3,4) on the figure
    plt.show()
    return True


def writeVTKMaster(kTime,name,path, time, xxArg, uArg, sigmaArg):
    points = list()
    for i in range(0, len(xxArg)):
        for j in range(0, len(xxArg[0])):
            for k in range(0, len(xxArg[0][0])):
                ppData = dict()
                ppData["u"] = uArg[i,j,k]
                ppData["sigma"] = np.reshape(sigmaArg[i, j, k], 9)
                points.append(Point(xxArg[i, j, k, 0], xxArg[i, j, k, 1], xxArg[i, j, k, 2], ppData))
    writeVTK(kTime, name, path, points, time)


def writeVTK(kTime,name,path, points, time):
    file_name = path + name + '.vtk.' + '{:06d}'.format(kTime)
    my_file = open(file_name, 'w')

    my_file.write('# vtk DataFile Version 2.0 \n')
    my_file.write(
        'generated by Lattice Boltzmann Method time = {0:16.8e}\n'.format(time))
    my_file.write('ASCII \n')
    my_file.write('DATASET UNSTRUCTURED_GRID\n')
    my_file.write('\n')

    tmp_point = points[0]
    fields_in_PPData_number = len(tmp_point.PPData.keys())
    point_number = len(points)

    my_file.write('POINTS {0:6d} FLOAT \n'.format(point_number))
    for point in points:
        positionString = '{0:16.8e} '.format(point.x) + '{0:16.8e} '.format(
            point.y) + '{0:16.8e} \n'.format(point.z)
        my_file.write(positionString)
    my_file.write('\n')  # optional?

    my_file.write('CELLS {0:6d} {1:6d}\n'.format(point_number, 2 * point_number))
    for i in range(0, len(points)):
        connectivityString = '1 {0:6d} \n'.format(i)
        my_file.write(connectivityString)

    my_file.write('CELL_TYPES {0:6d}\n'.format(point_number))
    for i in range(0, len(points)):
        cellTypeString = '1\n'
        my_file.write(cellTypeString)

    my_file.write('POINT_DATA {0:6d}\n'.format(point_number))
    my_file.write('FIELD solution {0:1d}\n'.format(fields_in_PPData_number))

    def write_PPData_2_vtk(point, key):
        if hasattr(point.PPData[key], "__len__"):  # if PPData[key] is a list
            tmp_string = ''
            for i in range(0, len(point.PPData[key])):
                tmp_string2 = '{0' + ':18.8e} '
                value = point.PPData[key][i]
                if value is None:
                    value = -999
                tmp_string = tmp_string + tmp_string2.format(value)
        else:
            value = point.PPData[key]
            if value is None:
                value = -999
            tmp_string = '{0:18.8e} '.format(value)
        return tmp_string + '\n'

    for key in tmp_point.PPData.keys():
        if hasattr(tmp_point.PPData[key], '__len__'):
            # tmp_len = str(fields_in_PPData_number)  # can deal with arrays
            tmp_len = str(int(len(tmp_point.PPData[key])))
        else:
            tmp_len = str(1)

        my_file.write(key + ' ' + tmp_len + ' {0:6d} DOUBLE\n'.format(point_number))
        for point in points:
            my_file.write(write_PPData_2_vtk(point, key))
        my_file.write('\n')

    my_file.close()


# test writeVTK
class Point(object):
    def __init__(self, x, y, z, PPData = dict()):
        self.x = x
        self.y = y
        self.z = z
        self.PPData = PPData


